/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 868.0, "minX": 0.0, "maxY": 30339.0, "series": [{"data": [[0.0, 868.0], [0.1, 868.0], [0.2, 965.0], [0.3, 971.0], [0.4, 974.0], [0.5, 975.0], [0.6, 977.0], [0.7, 978.0], [0.8, 981.0], [0.9, 985.0], [1.0, 985.0], [1.1, 990.0], [1.2, 1008.0], [1.3, 1012.0], [1.4, 1015.0], [1.5, 1049.0], [1.6, 1055.0], [1.7, 1056.0], [1.8, 1058.0], [1.9, 1061.0], [2.0, 1061.0], [2.1, 1062.0], [2.2, 1063.0], [2.3, 1078.0], [2.4, 1087.0], [2.5, 1091.0], [2.6, 1146.0], [2.7, 1150.0], [2.8, 1152.0], [2.9, 1162.0], [3.0, 1162.0], [3.1, 1171.0], [3.2, 1208.0], [3.3, 1211.0], [3.4, 1394.0], [3.5, 1399.0], [3.6, 1399.0], [3.7, 1444.0], [3.8, 1458.0], [3.9, 1468.0], [4.0, 1468.0], [4.1, 1472.0], [4.2, 1477.0], [4.3, 1505.0], [4.4, 1510.0], [4.5, 1512.0], [4.6, 1512.0], [4.7, 1515.0], [4.8, 1520.0], [4.9, 1521.0], [5.0, 1522.0], [5.1, 1522.0], [5.2, 1525.0], [5.3, 1532.0], [5.4, 1538.0], [5.5, 1544.0], [5.6, 1548.0], [5.7, 1549.0], [5.8, 1552.0], [5.9, 1556.0], [6.0, 1556.0], [6.1, 1556.0], [6.2, 1611.0], [6.3, 1632.0], [6.4, 1644.0], [6.5, 1766.0], [6.6, 1894.0], [6.7, 1926.0], [6.8, 2031.0], [6.9, 2268.0], [7.0, 2268.0], [7.1, 2268.0], [7.2, 2380.0], [7.3, 3382.0], [7.4, 3385.0], [7.5, 3524.0], [7.6, 3972.0], [7.7, 3978.0], [7.8, 3982.0], [7.9, 3985.0], [8.0, 4029.0], [8.1, 4029.0], [8.2, 4035.0], [8.3, 4044.0], [8.4, 4045.0], [8.5, 4046.0], [8.6, 4047.0], [8.7, 4053.0], [8.8, 4058.0], [8.9, 4060.0], [9.0, 4061.0], [9.1, 4061.0], [9.2, 4062.0], [9.3, 4064.0], [9.4, 4066.0], [9.5, 4067.0], [9.6, 4067.0], [9.7, 4069.0], [9.8, 4070.0], [9.9, 4076.0], [10.0, 4078.0], [10.1, 4078.0], [10.2, 4079.0], [10.3, 4080.0], [10.4, 4082.0], [10.5, 4084.0], [10.6, 4085.0], [10.7, 4086.0], [10.8, 4087.0], [10.9, 4087.0], [11.0, 4092.0], [11.1, 4092.0], [11.2, 4093.0], [11.3, 4095.0], [11.4, 4096.0], [11.5, 4096.0], [11.6, 4096.0], [11.7, 4099.0], [11.8, 4100.0], [11.9, 4104.0], [12.0, 4106.0], [12.1, 4106.0], [12.2, 4107.0], [12.3, 4113.0], [12.4, 4115.0], [12.5, 4116.0], [12.6, 4123.0], [12.7, 4132.0], [12.8, 4135.0], [12.9, 4149.0], [13.0, 4155.0], [13.1, 4155.0], [13.2, 4163.0], [13.3, 4180.0], [13.4, 4186.0], [13.5, 4190.0], [13.6, 4190.0], [13.7, 4197.0], [13.8, 4228.0], [13.9, 4250.0], [14.0, 4257.0], [14.1, 4257.0], [14.2, 4301.0], [14.3, 4407.0], [14.4, 4439.0], [14.5, 4448.0], [14.6, 4455.0], [14.7, 4457.0], [14.8, 4487.0], [14.9, 4518.0], [15.0, 4575.0], [15.1, 4575.0], [15.2, 4660.0], [15.3, 4749.0], [15.4, 4750.0], [15.5, 4760.0], [15.6, 4873.0], [15.7, 4892.0], [15.8, 4894.0], [15.9, 4909.0], [16.0, 4924.0], [16.1, 4924.0], [16.2, 4981.0], [16.3, 5001.0], [16.4, 5004.0], [16.5, 5019.0], [16.6, 5036.0], [16.7, 5186.0], [16.8, 5189.0], [16.9, 5196.0], [17.0, 5208.0], [17.1, 5208.0], [17.2, 5223.0], [17.3, 5242.0], [17.4, 5286.0], [17.5, 5289.0], [17.6, 5295.0], [17.7, 5296.0], [17.8, 5300.0], [17.9, 5325.0], [18.0, 5375.0], [18.1, 5375.0], [18.2, 5404.0], [18.3, 5416.0], [18.4, 5416.0], [18.5, 5420.0], [18.6, 5425.0], [18.7, 5425.0], [18.8, 5430.0], [18.9, 5433.0], [19.0, 5440.0], [19.1, 5440.0], [19.2, 5446.0], [19.3, 5450.0], [19.4, 5451.0], [19.5, 5453.0], [19.6, 5456.0], [19.7, 5458.0], [19.8, 5460.0], [19.9, 5461.0], [20.0, 5464.0], [20.1, 5464.0], [20.2, 5473.0], [20.3, 5478.0], [20.4, 5486.0], [20.5, 5493.0], [20.6, 5505.0], [20.7, 5508.0], [20.8, 5511.0], [20.9, 5513.0], [21.0, 5519.0], [21.1, 5519.0], [21.2, 5520.0], [21.3, 5522.0], [21.4, 5523.0], [21.5, 5525.0], [21.6, 5526.0], [21.7, 5531.0], [21.8, 5532.0], [21.9, 5539.0], [22.0, 5543.0], [22.1, 5543.0], [22.2, 5544.0], [22.3, 5545.0], [22.4, 5550.0], [22.5, 5551.0], [22.6, 5554.0], [22.7, 5555.0], [22.8, 5558.0], [22.9, 5561.0], [23.0, 5562.0], [23.1, 5562.0], [23.2, 5565.0], [23.3, 5566.0], [23.4, 5571.0], [23.5, 5576.0], [23.6, 5580.0], [23.7, 5582.0], [23.8, 5584.0], [23.9, 5584.0], [24.0, 5586.0], [24.1, 5586.0], [24.2, 5593.0], [24.3, 5597.0], [24.4, 5599.0], [24.5, 5610.0], [24.6, 5618.0], [24.7, 5620.0], [24.8, 5635.0], [24.9, 5638.0], [25.0, 5638.0], [25.1, 5638.0], [25.2, 5639.0], [25.3, 5654.0], [25.4, 5655.0], [25.5, 5658.0], [25.6, 5659.0], [25.7, 5665.0], [25.8, 5665.0], [25.9, 5670.0], [26.0, 5670.0], [26.1, 5670.0], [26.2, 5676.0], [26.3, 5677.0], [26.4, 5679.0], [26.5, 5681.0], [26.6, 5685.0], [26.7, 5691.0], [26.8, 5692.0], [26.9, 5715.0], [27.0, 5719.0], [27.1, 5719.0], [27.2, 5726.0], [27.3, 5757.0], [27.4, 5764.0], [27.5, 5765.0], [27.6, 5772.0], [27.7, 5785.0], [27.8, 5793.0], [27.9, 5793.0], [28.0, 5804.0], [28.1, 5804.0], [28.2, 5832.0], [28.3, 5843.0], [28.4, 5849.0], [28.5, 5860.0], [28.6, 5872.0], [28.7, 5883.0], [28.8, 5883.0], [28.9, 5890.0], [29.0, 5897.0], [29.1, 5897.0], [29.2, 5923.0], [29.3, 5924.0], [29.4, 5932.0], [29.5, 5932.0], [29.6, 5933.0], [29.7, 5960.0], [29.8, 5960.0], [29.9, 5960.0], [30.0, 5970.0], [30.1, 5970.0], [30.2, 5972.0], [30.3, 5976.0], [30.4, 5977.0], [30.5, 5982.0], [30.6, 5984.0], [30.7, 5986.0], [30.8, 5988.0], [30.9, 5988.0], [31.0, 5990.0], [31.1, 5990.0], [31.2, 5994.0], [31.3, 5995.0], [31.4, 5995.0], [31.5, 6000.0], [31.6, 6024.0], [31.7, 6024.0], [31.8, 6028.0], [31.9, 6043.0], [32.0, 6072.0], [32.1, 6072.0], [32.2, 6124.0], [32.3, 6127.0], [32.4, 6166.0], [32.5, 6197.0], [32.6, 6217.0], [32.7, 6220.0], [32.8, 6222.0], [32.9, 6224.0], [33.0, 6225.0], [33.1, 6225.0], [33.2, 6228.0], [33.3, 6236.0], [33.4, 6236.0], [33.5, 6238.0], [33.6, 6242.0], [33.7, 6251.0], [33.8, 6256.0], [33.9, 6257.0], [34.0, 6262.0], [34.1, 6262.0], [34.2, 6269.0], [34.3, 6271.0], [34.4, 6271.0], [34.5, 6281.0], [34.6, 6282.0], [34.7, 6282.0], [34.8, 6285.0], [34.9, 6287.0], [35.0, 6290.0], [35.1, 6290.0], [35.2, 6290.0], [35.3, 6295.0], [35.4, 6297.0], [35.5, 6298.0], [35.6, 6299.0], [35.7, 6301.0], [35.8, 6301.0], [35.9, 6302.0], [36.0, 6302.0], [36.1, 6302.0], [36.2, 6307.0], [36.3, 6312.0], [36.4, 6316.0], [36.5, 6322.0], [36.6, 6325.0], [36.7, 6326.0], [36.8, 6327.0], [36.9, 6327.0], [37.0, 6328.0], [37.1, 6328.0], [37.2, 6328.0], [37.3, 6329.0], [37.4, 6329.0], [37.5, 6332.0], [37.6, 6333.0], [37.7, 6334.0], [37.8, 6338.0], [37.9, 6344.0], [38.0, 6344.0], [38.1, 6348.0], [38.2, 6365.0], [38.3, 6366.0], [38.4, 6368.0], [38.5, 6398.0], [38.6, 6399.0], [38.7, 6399.0], [38.8, 6403.0], [38.9, 6404.0], [39.0, 6404.0], [39.1, 6405.0], [39.2, 6409.0], [39.3, 6409.0], [39.4, 6412.0], [39.5, 6415.0], [39.6, 6418.0], [39.7, 6419.0], [39.8, 6419.0], [39.9, 6420.0], [40.0, 6420.0], [40.1, 6422.0], [40.2, 6423.0], [40.3, 6423.0], [40.4, 6424.0], [40.5, 6426.0], [40.6, 6427.0], [40.7, 6427.0], [40.8, 6430.0], [40.9, 6432.0], [41.0, 6432.0], [41.1, 6433.0], [41.2, 6435.0], [41.3, 6437.0], [41.4, 6439.0], [41.5, 6440.0], [41.6, 6442.0], [41.7, 6444.0], [41.8, 6445.0], [41.9, 6446.0], [42.0, 6446.0], [42.1, 6447.0], [42.2, 6448.0], [42.3, 6449.0], [42.4, 6451.0], [42.5, 6452.0], [42.6, 6452.0], [42.7, 6453.0], [42.8, 6456.0], [42.9, 6457.0], [43.0, 6457.0], [43.1, 6462.0], [43.2, 6465.0], [43.3, 6468.0], [43.4, 6471.0], [43.5, 6473.0], [43.6, 6473.0], [43.7, 6474.0], [43.8, 6475.0], [43.9, 6481.0], [44.0, 6481.0], [44.1, 6483.0], [44.2, 6491.0], [44.3, 6496.0], [44.4, 6501.0], [44.5, 6503.0], [44.6, 6511.0], [44.7, 6517.0], [44.8, 6525.0], [44.9, 6538.0], [45.0, 6538.0], [45.1, 6562.0], [45.2, 6585.0], [45.3, 6597.0], [45.4, 6613.0], [45.5, 6644.0], [45.6, 6652.0], [45.7, 6658.0], [45.8, 6665.0], [45.9, 6666.0], [46.0, 6666.0], [46.1, 6666.0], [46.2, 6668.0], [46.3, 6668.0], [46.4, 6692.0], [46.5, 6699.0], [46.6, 6699.0], [46.7, 6700.0], [46.8, 6703.0], [46.9, 6715.0], [47.0, 6715.0], [47.1, 6716.0], [47.2, 6717.0], [47.3, 6718.0], [47.4, 6719.0], [47.5, 6719.0], [47.6, 6720.0], [47.7, 6723.0], [47.8, 6733.0], [47.9, 6736.0], [48.0, 6736.0], [48.1, 6737.0], [48.2, 6737.0], [48.3, 6737.0], [48.4, 6739.0], [48.5, 6743.0], [48.6, 6746.0], [48.7, 6749.0], [48.8, 6750.0], [48.9, 6756.0], [49.0, 6756.0], [49.1, 6758.0], [49.2, 6761.0], [49.3, 6762.0], [49.4, 6763.0], [49.5, 6764.0], [49.6, 6772.0], [49.7, 6773.0], [49.8, 6774.0], [49.9, 6779.0], [50.0, 6779.0], [50.1, 6784.0], [50.2, 6786.0], [50.3, 6786.0], [50.4, 6792.0], [50.5, 6817.0], [50.6, 6856.0], [50.7, 6859.0], [50.8, 6886.0], [50.9, 6922.0], [51.0, 6922.0], [51.1, 6950.0], [51.2, 6963.0], [51.3, 6972.0], [51.4, 6976.0], [51.5, 6978.0], [51.6, 6982.0], [51.7, 7014.0], [51.8, 7038.0], [51.9, 7052.0], [52.0, 7052.0], [52.1, 7063.0], [52.2, 7070.0], [52.3, 7074.0], [52.4, 7078.0], [52.5, 7078.0], [52.6, 7081.0], [52.7, 7086.0], [52.8, 7092.0], [52.9, 7108.0], [53.0, 7108.0], [53.1, 7123.0], [53.2, 7128.0], [53.3, 7160.0], [53.4, 7177.0], [53.5, 7177.0], [53.6, 7179.0], [53.7, 7181.0], [53.8, 7187.0], [53.9, 7219.0], [54.0, 7219.0], [54.1, 7233.0], [54.2, 7239.0], [54.3, 7265.0], [54.4, 7295.0], [54.5, 7299.0], [54.6, 7302.0], [54.7, 7311.0], [54.8, 7316.0], [54.9, 7322.0], [55.0, 7322.0], [55.1, 7327.0], [55.2, 7337.0], [55.3, 7344.0], [55.4, 7361.0], [55.5, 7364.0], [55.6, 7365.0], [55.7, 7400.0], [55.8, 7410.0], [55.9, 7469.0], [56.0, 7469.0], [56.1, 7490.0], [56.2, 7500.0], [56.3, 7506.0], [56.4, 7519.0], [56.5, 7549.0], [56.6, 7549.0], [56.7, 7565.0], [56.8, 7609.0], [56.9, 7612.0], [57.0, 7612.0], [57.1, 7616.0], [57.2, 7618.0], [57.3, 7634.0], [57.4, 7640.0], [57.5, 7688.0], [57.6, 7692.0], [57.7, 7706.0], [57.8, 7725.0], [57.9, 7738.0], [58.0, 7738.0], [58.1, 7806.0], [58.2, 7829.0], [58.3, 7843.0], [58.4, 7865.0], [58.5, 7872.0], [58.6, 7967.0], [58.7, 7974.0], [58.8, 8007.0], [58.9, 8027.0], [59.0, 8027.0], [59.1, 8038.0], [59.2, 8044.0], [59.3, 8060.0], [59.4, 8081.0], [59.5, 8088.0], [59.6, 8091.0], [59.7, 8098.0], [59.8, 8106.0], [59.9, 8109.0], [60.0, 8109.0], [60.1, 8140.0], [60.2, 8145.0], [60.3, 8146.0], [60.4, 8158.0], [60.5, 8162.0], [60.6, 8172.0], [60.7, 8173.0], [60.8, 8187.0], [60.9, 8192.0], [61.0, 8192.0], [61.1, 8214.0], [61.2, 8216.0], [61.3, 8217.0], [61.4, 8230.0], [61.5, 8248.0], [61.6, 8248.0], [61.7, 8250.0], [61.8, 8259.0], [61.9, 8297.0], [62.0, 8297.0], [62.1, 8315.0], [62.2, 8316.0], [62.3, 8324.0], [62.4, 8342.0], [62.5, 8349.0], [62.6, 8353.0], [62.7, 8354.0], [62.8, 8358.0], [62.9, 8368.0], [63.0, 8368.0], [63.1, 8381.0], [63.2, 8387.0], [63.3, 8393.0], [63.4, 8415.0], [63.5, 8417.0], [63.6, 8433.0], [63.7, 8455.0], [63.8, 8466.0], [63.9, 8469.0], [64.0, 8469.0], [64.1, 8487.0], [64.2, 8489.0], [64.3, 8489.0], [64.4, 8491.0], [64.5, 8495.0], [64.6, 8497.0], [64.7, 8500.0], [64.8, 8512.0], [64.9, 8524.0], [65.0, 8524.0], [65.1, 8529.0], [65.2, 8601.0], [65.3, 8607.0], [65.4, 8608.0], [65.5, 8615.0], [65.6, 8627.0], [65.7, 8636.0], [65.8, 8671.0], [65.9, 8683.0], [66.0, 8683.0], [66.1, 8747.0], [66.2, 8824.0], [66.3, 8897.0], [66.4, 8904.0], [66.5, 8945.0], [66.6, 8947.0], [66.7, 8955.0], [66.8, 8972.0], [66.9, 9016.0], [67.0, 9016.0], [67.1, 9050.0], [67.2, 9054.0], [67.3, 9055.0], [67.4, 9056.0], [67.5, 9057.0], [67.6, 9063.0], [67.7, 9071.0], [67.8, 9099.0], [67.9, 9105.0], [68.0, 9105.0], [68.1, 9112.0], [68.2, 9125.0], [68.3, 9126.0], [68.4, 9132.0], [68.5, 9190.0], [68.6, 9252.0], [68.7, 9304.0], [68.8, 9313.0], [68.9, 9328.0], [69.0, 9328.0], [69.1, 9336.0], [69.2, 9338.0], [69.3, 9342.0], [69.4, 9348.0], [69.5, 9373.0], [69.6, 9391.0], [69.7, 9396.0], [69.8, 9420.0], [69.9, 9421.0], [70.0, 9421.0], [70.1, 9424.0], [70.2, 9426.0], [70.3, 9427.0], [70.4, 9432.0], [70.5, 9436.0], [70.6, 9446.0], [70.7, 9451.0], [70.8, 9452.0], [70.9, 9453.0], [71.0, 9453.0], [71.1, 9457.0], [71.2, 9468.0], [71.3, 9469.0], [71.4, 9474.0], [71.5, 9485.0], [71.6, 9493.0], [71.7, 9501.0], [71.8, 9533.0], [71.9, 9537.0], [72.0, 9537.0], [72.1, 9540.0], [72.2, 9562.0], [72.3, 9579.0], [72.4, 9599.0], [72.5, 9599.0], [72.6, 9600.0], [72.7, 9683.0], [72.8, 9744.0], [72.9, 9744.0], [73.0, 9744.0], [73.1, 9751.0], [73.2, 9763.0], [73.3, 9764.0], [73.4, 9837.0], [73.5, 9848.0], [73.6, 9869.0], [73.7, 9907.0], [73.8, 9921.0], [73.9, 9932.0], [74.0, 9932.0], [74.1, 9934.0], [74.2, 9942.0], [74.3, 9953.0], [74.4, 9960.0], [74.5, 9964.0], [74.6, 9997.0], [74.7, 10049.0], [74.8, 10072.0], [74.9, 10081.0], [75.0, 10081.0], [75.1, 10110.0], [75.2, 10114.0], [75.3, 10115.0], [75.4, 10115.0], [75.5, 10127.0], [75.6, 10160.0], [75.7, 10160.0], [75.8, 10161.0], [75.9, 10171.0], [76.0, 10171.0], [76.1, 10219.0], [76.2, 10234.0], [76.3, 10257.0], [76.4, 10330.0], [76.5, 10421.0], [76.6, 10467.0], [76.7, 10470.0], [76.8, 10518.0], [76.9, 10596.0], [77.0, 10596.0], [77.1, 10597.0], [77.2, 10627.0], [77.3, 10639.0], [77.4, 10761.0], [77.5, 10774.0], [77.6, 10779.0], [77.7, 10784.0], [77.8, 10843.0], [77.9, 10854.0], [78.0, 10854.0], [78.1, 10915.0], [78.2, 10975.0], [78.3, 10979.0], [78.4, 10981.0], [78.5, 10984.0], [78.6, 10990.0], [78.7, 10999.0], [78.8, 11000.0], [78.9, 11001.0], [79.0, 11001.0], [79.1, 11010.0], [79.2, 11024.0], [79.3, 11035.0], [79.4, 11049.0], [79.5, 11055.0], [79.6, 11070.0], [79.7, 11086.0], [79.8, 11103.0], [79.9, 11111.0], [80.0, 11111.0], [80.1, 11119.0], [80.2, 11131.0], [80.3, 11131.0], [80.4, 11142.0], [80.5, 11147.0], [80.6, 11154.0], [80.7, 11167.0], [80.8, 11168.0], [80.9, 11179.0], [81.0, 11179.0], [81.1, 11182.0], [81.2, 11184.0], [81.3, 11194.0], [81.4, 11219.0], [81.5, 11228.0], [81.6, 11230.0], [81.7, 11245.0], [81.8, 11253.0], [81.9, 11257.0], [82.0, 11257.0], [82.1, 11258.0], [82.2, 11262.0], [82.3, 11266.0], [82.4, 11267.0], [82.5, 11281.0], [82.6, 11307.0], [82.7, 11327.0], [82.8, 11338.0], [82.9, 11351.0], [83.0, 11351.0], [83.1, 11352.0], [83.2, 11387.0], [83.3, 11418.0], [83.4, 11420.0], [83.5, 11427.0], [83.6, 11459.0], [83.7, 11497.0], [83.8, 11506.0], [83.9, 11535.0], [84.0, 11535.0], [84.1, 11594.0], [84.2, 11600.0], [84.3, 11632.0], [84.4, 11638.0], [84.5, 11641.0], [84.6, 11662.0], [84.7, 11678.0], [84.8, 11682.0], [84.9, 11683.0], [85.0, 11683.0], [85.1, 11685.0], [85.2, 11696.0], [85.3, 11714.0], [85.4, 11717.0], [85.5, 11722.0], [85.6, 11722.0], [85.7, 11724.0], [85.8, 11726.0], [85.9, 11726.0], [86.0, 11726.0], [86.1, 11748.0], [86.2, 11775.0], [86.3, 11829.0], [86.4, 11844.0], [86.5, 11848.0], [86.6, 11854.0], [86.7, 11857.0], [86.8, 11912.0], [86.9, 11926.0], [87.0, 11926.0], [87.1, 11950.0], [87.2, 11972.0], [87.3, 12004.0], [87.4, 12014.0], [87.5, 12026.0], [87.6, 12027.0], [87.7, 12031.0], [87.8, 12054.0], [87.9, 12105.0], [88.0, 12105.0], [88.1, 12105.0], [88.2, 12133.0], [88.3, 12137.0], [88.4, 12249.0], [88.5, 12251.0], [88.6, 12278.0], [88.7, 12315.0], [88.8, 12318.0], [88.9, 12319.0], [89.0, 12319.0], [89.1, 12319.0], [89.2, 12319.0], [89.3, 12321.0], [89.4, 12334.0], [89.5, 12346.0], [89.6, 12349.0], [89.7, 12352.0], [89.8, 12363.0], [89.9, 12366.0], [90.0, 12366.0], [90.1, 12373.0], [90.2, 12375.0], [90.3, 12386.0], [90.4, 12399.0], [90.5, 12401.0], [90.6, 12405.0], [90.7, 12429.0], [90.8, 12468.0], [90.9, 12509.0], [91.0, 12509.0], [91.1, 12551.0], [91.2, 12553.0], [91.3, 12555.0], [91.4, 12567.0], [91.5, 12584.0], [91.6, 12587.0], [91.7, 12636.0], [91.8, 12662.0], [91.9, 12665.0], [92.0, 12665.0], [92.1, 12673.0], [92.2, 12673.0], [92.3, 12674.0], [92.4, 12674.0], [92.5, 12675.0], [92.6, 12677.0], [92.7, 12677.0], [92.8, 12678.0], [92.9, 12680.0], [93.0, 12680.0], [93.1, 12688.0], [93.2, 12691.0], [93.3, 12691.0], [93.4, 12691.0], [93.5, 12708.0], [93.6, 12748.0], [93.7, 12762.0], [93.8, 12907.0], [93.9, 12939.0], [94.0, 12939.0], [94.1, 13457.0], [94.2, 13509.0], [94.3, 13563.0], [94.4, 13612.0], [94.5, 13655.0], [94.6, 13706.0], [94.7, 13718.0], [94.8, 13762.0], [94.9, 13770.0], [95.0, 13770.0], [95.1, 13811.0], [95.2, 13814.0], [95.3, 13816.0], [95.4, 13818.0], [95.5, 13821.0], [95.6, 13824.0], [95.7, 13825.0], [95.8, 13949.0], [95.9, 13961.0], [96.0, 13961.0], [96.1, 14214.0], [96.2, 14229.0], [96.3, 14237.0], [96.4, 14332.0], [96.5, 14426.0], [96.6, 14506.0], [96.7, 14545.0], [96.8, 14674.0], [96.9, 14707.0], [97.0, 14707.0], [97.1, 14815.0], [97.2, 14951.0], [97.3, 15157.0], [97.4, 15351.0], [97.5, 15837.0], [97.6, 16248.0], [97.7, 16258.0], [97.8, 16921.0], [97.9, 17052.0], [98.0, 17052.0], [98.1, 17921.0], [98.2, 17933.0], [98.3, 17959.0], [98.4, 18007.0], [98.5, 18178.0], [98.6, 21460.0], [98.7, 24876.0], [98.8, 24877.0], [98.9, 25000.0], [99.0, 25000.0], [99.1, 25372.0], [99.2, 25538.0], [99.3, 25576.0], [99.4, 29573.0], [99.5, 29715.0], [99.6, 29822.0], [99.7, 29830.0], [99.8, 30213.0], [99.9, 30339.0], [100.0, 30339.0]], "isOverall": false, "label": "reqres api", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 50.0, "series": [{"data": [[800.0, 1.0], [900.0, 9.0], [1000.0, 13.0], [1100.0, 5.0], [1200.0, 2.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 17.0], [1600.0, 3.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2300.0, 1.0], [2200.0, 2.0], [3300.0, 2.0], [3500.0, 1.0], [3900.0, 4.0], [4000.0, 34.0], [4100.0, 18.0], [4300.0, 1.0], [4200.0, 3.0], [4600.0, 1.0], [4400.0, 6.0], [4500.0, 2.0], [4700.0, 3.0], [4800.0, 3.0], [4900.0, 3.0], [5000.0, 4.0], [5100.0, 3.0], [5200.0, 7.0], [5300.0, 3.0], [5400.0, 22.0], [5600.0, 22.0], [5500.0, 35.0], [5700.0, 10.0], [5800.0, 10.0], [5900.0, 21.0], [6000.0, 6.0], [6100.0, 4.0], [6200.0, 28.0], [6300.0, 28.0], [6500.0, 9.0], [6400.0, 50.0], [6600.0, 12.0], [6900.0, 7.0], [6700.0, 34.0], [6800.0, 4.0], [7000.0, 11.0], [7100.0, 9.0], [7300.0, 10.0], [7400.0, 4.0], [7200.0, 6.0], [7600.0, 8.0], [7500.0, 6.0], [7900.0, 2.0], [7800.0, 5.0], [7700.0, 3.0], [8100.0, 11.0], [8000.0, 9.0], [8300.0, 12.0], [8200.0, 9.0], [8400.0, 12.0], [8600.0, 8.0], [8500.0, 4.0], [8700.0, 1.0], [8900.0, 5.0], [8800.0, 2.0], [9100.0, 6.0], [9000.0, 9.0], [9200.0, 1.0], [9600.0, 2.0], [9300.0, 10.0], [9400.0, 17.0], [9500.0, 8.0], [9700.0, 5.0], [9900.0, 9.0], [9800.0, 3.0], [10200.0, 3.0], [10000.0, 3.0], [10100.0, 9.0], [10600.0, 2.0], [10400.0, 3.0], [10700.0, 4.0], [10300.0, 1.0], [10500.0, 3.0], [11100.0, 14.0], [11200.0, 11.0], [11000.0, 9.0], [10900.0, 7.0], [10800.0, 2.0], [11600.0, 10.0], [11700.0, 9.0], [11300.0, 6.0], [11400.0, 5.0], [11500.0, 3.0], [11800.0, 5.0], [12000.0, 6.0], [11900.0, 4.0], [12100.0, 4.0], [12200.0, 3.0], [12300.0, 16.0], [12400.0, 4.0], [12500.0, 7.0], [12600.0, 16.0], [12700.0, 3.0], [12900.0, 2.0], [13600.0, 2.0], [13400.0, 1.0], [13500.0, 2.0], [13700.0, 4.0], [13800.0, 7.0], [13900.0, 2.0], [14200.0, 3.0], [14300.0, 1.0], [14400.0, 1.0], [14500.0, 2.0], [14600.0, 1.0], [14800.0, 1.0], [14700.0, 1.0], [15100.0, 1.0], [15300.0, 1.0], [14900.0, 1.0], [15800.0, 1.0], [16200.0, 2.0], [16900.0, 1.0], [17000.0, 1.0], [17900.0, 3.0], [18000.0, 1.0], [18100.0, 1.0], [21400.0, 1.0], [25000.0, 1.0], [25500.0, 2.0], [25300.0, 1.0], [24800.0, 2.0], [29500.0, 1.0], [29800.0, 2.0], [30300.0, 1.0], [30200.0, 1.0], [29700.0, 1.0]], "isOverall": false, "label": "reqres api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 824.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 38.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 824.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 38.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 208.6441102756893, "minX": 1.72880202E12, "maxY": 631.868263473053, "series": [{"data": [[1.72880208E12, 208.6441102756893], [1.72880202E12, 631.868263473053]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1150.0, "minX": 1.0, "maxY": 30127.333333333332, "series": [{"data": [[4.0, 29573.0], [5.0, 30127.333333333332], [6.0, 29822.0], [7.0, 25576.0], [11.0, 24876.5], [12.0, 25303.333333333332], [13.0, 21460.0], [14.0, 15837.0], [15.0, 14707.0], [16.0, 12939.0], [17.0, 14506.0], [18.0, 11418.0], [19.0, 9960.0], [20.0, 11352.0], [23.0, 15772.0], [24.0, 14951.0], [26.0, 14448.0], [28.0, 15083.0], [29.0, 8671.0], [30.0, 13718.0], [31.0, 17959.0], [33.0, 9451.0], [32.0, 17933.0], [35.0, 8417.0], [34.0, 9457.0], [37.0, 11816.5], [39.0, 17052.0], [38.0, 14332.0], [41.0, 16921.0], [40.0, 14229.0], [43.0, 16258.0], [42.0, 14214.0], [45.0, 9436.0], [44.0, 16248.0], [47.0, 10112.5], [49.0, 10114.0], [50.0, 10138.0], [52.0, 10149.0], [55.0, 10468.5], [54.0, 10160.0], [57.0, 11726.0], [59.0, 11202.0], [61.0, 8007.0], [60.0, 10597.0], [62.0, 7549.0], [67.0, 8244.5], [65.0, 7233.333333333333], [71.0, 8770.0], [70.0, 10234.0], [68.0, 6773.0], [75.0, 6242.0], [74.0, 7355.5], [73.0, 6282.0], [79.0, 8188.333333333333], [77.0, 8158.0], [80.0, 8172.0], [87.0, 7196.5], [84.0, 6405.0], [91.0, 12363.0], [89.0, 8518.0], [94.0, 7094.0], [92.0, 9535.333333333334], [99.0, 8487.0], [98.0, 8693.333333333334], [97.0, 6658.0], [103.0, 9997.0], [102.0, 6667.0], [101.0, 8222.0], [107.0, 8469.0], [104.0, 8636.0], [110.0, 8478.5], [108.0, 8615.0], [109.0, 8489.0], [115.0, 7706.0], [114.0, 6873.0], [112.0, 10890.0], [119.0, 6045.5], [117.0, 6312.0], [116.0, 6562.0], [123.0, 6453.0], [122.0, 6426.0], [121.0, 10652.5], [127.0, 6972.5], [125.0, 7618.0], [124.0, 10219.0], [135.0, 6725.0], [134.0, 6262.0], [133.0, 5223.0], [131.0, 7181.0], [130.0, 7157.5], [128.0, 6127.0], [143.0, 6020.0], [139.0, 6222.0], [151.0, 6412.0], [150.0, 6355.333333333333], [149.0, 6332.0], [146.0, 6291.333333333333], [157.0, 6057.333333333333], [155.0, 5896.0], [152.0, 6322.0], [165.0, 6755.0], [163.0, 7070.0], [162.0, 6166.0], [161.0, 6188.0], [160.0, 5805.0], [174.0, 5757.5], [172.0, 7352.5], [170.0, 7565.0], [169.0, 6856.0], [168.0, 8596.75], [183.0, 6763.0], [182.0, 5980.0], [181.0, 5547.0], [180.0, 6817.0], [176.0, 6269.0], [188.0, 6775.25], [186.0, 6784.0], [185.0, 5196.0], [198.0, 6525.0], [195.0, 6972.0], [194.0, 6764.0], [192.0, 6786.0], [204.0, 6772.0], [201.0, 6070.8], [215.0, 10982.0], [212.0, 6758.0], [210.0, 6750.0], [209.0, 6737.0], [222.0, 6743.0], [220.0, 6746.0], [231.0, 9974.5], [227.0, 6731.0], [225.0, 6736.0], [238.0, 6707.5], [234.0, 6746.0], [232.0, 6737.0], [246.0, 6699.0], [244.0, 6711.0], [240.0, 6700.0], [247.0, 6692.0], [254.0, 8559.666666666666], [253.0, 6463.5], [250.0, 5968.5], [269.0, 5998.0], [270.0, 9837.0], [268.0, 5493.0], [266.0, 6000.0], [264.0, 7688.0], [263.0, 6503.0], [262.0, 6474.0], [261.0, 5819.666666666667], [257.0, 6279.25], [285.0, 5525.0], [286.0, 6501.0], [284.0, 6452.0], [275.0, 5576.0], [273.0, 5533.0], [272.0, 5531.0], [274.0, 5522.0], [283.0, 7108.0], [282.0, 6472.5], [281.0, 5551.0], [280.0, 5557.5], [278.0, 5565.0], [277.0, 5562.0], [302.0, 6473.0], [301.0, 7219.0], [299.0, 6430.0], [297.0, 6440.0], [296.0, 7233.0], [294.0, 7239.0], [291.0, 7265.0], [290.0, 6008.5], [289.0, 5533.666666666667], [319.0, 6905.0], [316.0, 6415.0], [312.0, 6475.0], [311.0, 6419.0], [309.0, 6427.0], [307.0, 6423.0], [305.0, 6424.0], [334.0, 6333.5], [332.0, 6333.5], [330.0, 7158.285714285714], [329.0, 6445.0], [328.0, 6457.0], [326.0, 6448.0], [324.0, 6456.5], [322.0, 7170.0], [320.0, 5545.0], [350.0, 6274.666666666667], [351.0, 6281.0], [348.0, 10854.0], [338.0, 7086.0], [337.0, 8972.0], [336.0, 7750.333333333333], [347.0, 6290.0], [346.0, 6302.0], [345.0, 6294.0], [343.0, 8607.0], [341.0, 6297.0], [340.0, 6800.0], [366.0, 6964.0], [364.0, 8140.0], [363.0, 5986.0], [357.0, 6033.5], [356.0, 6028.0], [354.0, 6218.5], [352.0, 6251.0], [382.0, 5970.0], [383.0, 8489.0], [381.0, 5982.0], [380.0, 5977.0], [379.0, 13706.0], [378.0, 13281.0], [376.0, 13086.333333333334], [373.0, 11871.6], [371.0, 13770.0], [370.0, 13762.0], [369.0, 11214.666666666666], [372.0, 5994.0], [396.0, 11467.0], [399.0, 10330.0], [398.0, 13612.0], [397.0, 12133.0], [392.0, 10072.0], [391.0, 10049.0], [385.0, 5960.0], [384.0, 5960.0], [387.0, 10518.0], [386.0, 5924.0], [390.0, 5832.0], [389.0, 5843.0], [388.0, 10081.0], [415.0, 10910.0], [414.0, 7355.0], [400.0, 5325.0], [430.0, 12552.0], [431.0, 12424.75], [428.0, 12637.5], [427.0, 12584.0], [424.0, 12386.8], [421.0, 12105.0], [419.0, 4242.5], [418.0, 4197.0], [416.0, 12553.0], [446.0, 11518.0], [447.0, 11506.0], [444.0, 12677.0], [435.0, 10597.666666666666], [434.0, 11982.333333333334], [443.0, 12665.0], [442.0, 11638.0], [441.0, 12401.0], [440.0, 11600.0], [439.0, 12399.0], [438.0, 11156.5], [437.0, 12278.0], [436.0, 10761.0], [460.0, 9394.5], [459.0, 9432.0], [458.0, 9423.0], [457.0, 10725.0], [455.0, 11847.0], [453.0, 12673.0], [452.0, 12461.5], [450.0, 9915.0], [478.0, 8579.0], [476.0, 10111.0], [475.0, 8861.0], [473.0, 7972.5], [471.0, 8365.166666666666], [467.0, 10365.0], [492.0, 4058.0], [494.0, 5036.0], [495.0, 4981.0], [493.0, 4066.0], [491.0, 6656.0], [490.0, 10861.666666666666], [486.0, 4061.0], [485.0, 4032.0], [483.0, 4067.0], [482.0, 9763.0], [481.0, 12509.0], [480.0, 5890.5], [508.0, 12346.0], [511.0, 7806.0], [510.0, 9932.0], [509.0, 10256.5], [504.0, 4924.0], [503.0, 12375.0], [497.0, 5001.0], [496.0, 5019.0], [499.0, 5004.0], [498.0, 4082.0], [502.0, 11829.0], [501.0, 12386.0], [500.0, 8945.0], [540.0, 8114.75], [543.0, 8871.666666666666], [539.0, 9540.0], [538.0, 9600.0], [537.0, 11035.0], [536.0, 10779.0], [526.0, 11150.4], [515.0, 11327.0], [512.0, 12191.666666666666], [517.0, 9099.0], [516.0, 10737.0], [519.0, 11652.0], [518.0, 9057.0], [521.0, 4100.0], [520.0, 4070.0], [532.0, 4062.0], [531.0, 4096.0], [530.0, 4087.0], [529.0, 9901.666666666666], [574.0, 12014.0], [575.0, 9422.5], [560.0, 5715.0], [562.0, 9490.0], [561.0, 5692.0], [573.0, 12318.666666666666], [571.0, 12320.0], [570.0, 11282.666666666666], [569.0, 11848.0], [557.0, 9201.2], [545.0, 10677.0], [567.0, 12315.0], [566.0, 11726.0], [565.0, 11523.0], [564.0, 11338.0], [595.0, 10366.0], [605.0, 11184.0], [604.0, 10690.5], [602.0, 10305.5], [600.0, 11683.0], [591.0, 9063.0], [583.0, 11748.0], [576.0, 4909.0], [588.0, 10404.8], [585.0, 9760.333333333334], [584.0, 11912.0], [599.0, 10073.5], [597.0, 5932.0], [596.0, 11103.0], [593.0, 4064.0], [592.0, 10780.0], [637.0, 5638.0], [638.0, 8289.5], [636.0, 8179.666666666667], [632.0, 6778.166666666667], [631.0, 5127.333333333333], [627.0, 7880.5], [626.0, 10760.0], [615.0, 10163.5], [614.0, 9533.0], [613.0, 8428.333333333334], [611.0, 9989.333333333334], [609.0, 9342.0], [670.0, 4575.0], [671.0, 4873.0], [658.0, 8481.0], [656.0, 5520.0], [669.0, 4250.0], [668.0, 4892.0], [667.0, 11119.0], [666.0, 4093.0], [665.0, 8825.5], [647.0, 7419.0], [646.0, 8299.5], [644.0, 7539.5], [640.0, 7572.0], [655.0, 9304.0], [653.0, 11262.0], [652.0, 9378.5], [650.0, 5526.0], [648.0, 5539.0], [663.0, 8076.0], [661.0, 7446.666666666667], [679.0, 8627.0], [701.0, 7177.0], [703.0, 6987.0], [699.0, 7179.0], [698.0, 7337.0], [697.0, 7821.0], [678.0, 4301.0], [677.0, 4407.0], [676.0, 4457.0], [675.0, 4448.0], [674.0, 4439.0], [673.0, 4518.0], [672.0, 4487.0], [686.0, 9132.0], [685.0, 8381.0], [684.0, 5938.666666666667], [681.0, 8607.0], [680.0, 8608.0], [695.0, 6859.0], [694.0, 8606.0], [692.0, 8399.666666666666], [689.0, 7202.0], [720.0, 5457.333333333333], [734.0, 2664.25], [733.0, 8947.0], [732.0, 8408.666666666666], [731.0, 3363.0], [728.0, 4149.666666666667], [710.0, 8098.0], [709.0, 7519.0], [708.0, 8106.0], [707.0, 6940.5], [705.0, 8433.0], [704.0, 8455.0], [727.0, 4600.0], [726.0, 5464.0], [722.0, 2588.0], [721.0, 6424.5], [725.0, 5673.5], [723.0, 5784.5], [719.0, 1150.0], [717.0, 7618.0], [712.0, 8084.5], [735.0, 7068.0], [743.0, 4139.25], [739.0, 3780.5], [754.0, 2108.8823529411766], [757.0, 5568.0], [756.0, 5411.666666666667], [755.0, 4123.4], [759.0, 4191.0], [758.0, 2784.0], [753.0, 3269.75], [764.0, 1707.0], [766.0, 3657.6666666666665], [752.0, 4084.0], [765.0, 2268.0], [763.0, 2733.0], [762.0, 1538.0], [761.0, 2813.5], [760.0, 1522.0], [741.0, 4789.4], [740.0, 4111.0], [738.0, 5094.0], [737.0, 9683.0], [736.0, 9313.0], [742.0, 4879.5], [749.0, 4258.0], [748.0, 5106.333333333333], [747.0, 4096.0], [746.0, 4936.0], [745.0, 6051.0], [744.0, 5658.0], [750.0, 5677.0], [751.0, 4626.0], [797.0, 3524.0], [774.0, 2808.4], [772.0, 4070.5], [794.0, 6447.0], [775.0, 8248.0], [771.0, 4617.666666666667], [770.0, 2133.2], [769.0, 8214.0], [783.0, 4047.0], [782.0, 5017.0], [781.0, 6082.0], [778.0, 4799.0], [776.0, 4053.0], [789.0, 5229.0], [787.0, 4190.0], [785.0, 3985.0], [784.0, 7974.0], [791.0, 7609.0], [790.0, 5483.0], [799.0, 3382.0], [798.0, 7506.0], [796.0, 4069.0], [795.0, 8324.0], [800.0, 3385.0], [1.0, 29715.0]], "isOverall": false, "label": "reqres api", "isController": false}, {"data": [[444.23555555555583, 7894.346666666667]], "isOverall": false, "label": "reqres api-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 781.05, "minX": 1.72880202E12, "maxY": 16612.616666666665, "series": [{"data": [[1.72880208E12, 13296.05], [1.72880202E12, 16612.616666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72880208E12, 781.05], [1.72880202E12, 986.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7284.6207584830345, "minX": 1.72880202E12, "maxY": 8659.942355889725, "series": [{"data": [[1.72880208E12, 8659.942355889725], [1.72880202E12, 7284.6207584830345]], "isOverall": false, "label": "reqres api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7093.908183632731, "minX": 1.72880202E12, "maxY": 7684.977443609024, "series": [{"data": [[1.72880208E12, 7684.977443609024], [1.72880202E12, 7093.908183632731]], "isOverall": false, "label": "reqres api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3276.259481037926, "minX": 1.72880202E12, "maxY": 5350.696741854638, "series": [{"data": [[1.72880208E12, 5350.696741854638], [1.72880202E12, 3276.259481037926]], "isOverall": false, "label": "reqres api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 868.0, "minX": 1.72880202E12, "maxY": 21460.0, "series": [{"data": [[1.72880208E12, 21460.0], [1.72880202E12, 12708.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72880208E12, 5186.0], [1.72880202E12, 868.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72880208E12, 13646.4], [1.72880202E12, 12030.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72880208E12, 17967.64], [1.72880202E12, 12688.54]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72880208E12, 6723.0], [1.72880202E12, 7967.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72880208E12, 14497.999999999998], [1.72880202E12, 12464.099999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1148.0, "minX": 1.0, "maxY": 29573.0, "series": [{"data": [[2.0, 14606.5], [177.0, 6465.0], [48.0, 1148.0], [3.0, 16248.0], [51.0, 2380.0], [4.0, 4855.5], [1.0, 10689.0], [278.0, 8444.0], [70.0, 8362.5], [95.0, 11497.0], [23.0, 14237.0], [6.0, 21460.0], [25.0, 4155.0], [107.0, 6418.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 25576.0], [278.0, 4090.0], [177.0, 6647.0], [95.0, 4063.5], [6.0, 29573.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 21460.0, "series": [{"data": [[2.0, 14606.5], [177.0, 6453.0], [48.0, 1103.0], [3.0, 16178.0], [51.0, 2380.0], [4.0, 4613.5], [1.0, 10689.0], [278.0, 8443.5], [70.0, 8362.0], [95.0, 11497.0], [23.0, 14233.0], [6.0, 21460.0], [25.0, 4155.0], [107.0, 6418.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [278.0, 0.0], [177.0, 0.0], [95.0, 0.0], [6.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.72880202E12, "maxY": 15.0, "series": [{"data": [[1.72880202E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880202E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.72880202E12, "maxY": 8.016666666666667, "series": [{"data": [[1.72880208E12, 6.35], [1.72880202E12, 8.016666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72880208E12, 0.3], [1.72880202E12, 0.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.72880202E12, "maxY": 8.016666666666667, "series": [{"data": [[1.72880208E12, 0.3], [1.72880202E12, 0.3333333333333333]], "isOverall": false, "label": "reqres api-failure", "isController": false}, {"data": [[1.72880208E12, 6.35], [1.72880202E12, 8.016666666666667]], "isOverall": false, "label": "reqres api-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.72880202E12, "maxY": 8.016666666666667, "series": [{"data": [[1.72880208E12, 6.35], [1.72880202E12, 8.016666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72880208E12, 0.3], [1.72880202E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

